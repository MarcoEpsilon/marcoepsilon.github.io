<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Marco Epsilon</title>
    <link>https://marcoepsilon.github.io/</link>
    <description>Recent content on Marco Epsilon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Marco Epsilon@Copyright</copyright>
    <lastBuildDate>Mon, 01 Mar 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://marcoepsilon.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Attribute specifier sequence</title>
      <link>https://marcoepsilon.github.io/posts/c&#43;&#43;/languages/declarations/attributes/</link>
      <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://marcoepsilon.github.io/posts/c&#43;&#43;/languages/declarations/attributes/</guid>
      <description>Overview Attribute specifier sequence(Since C++11)的引入是为了指定type, object, code等实现定义的属性。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; [[attr]] [[attr1, attr2, attr3(arg)]] [[namespace::attr(arg)]] alignas_specifier 形式化地,语法应该如下: .tmp_note_table { padding:0px 0px; border:none; margin:4px 0px; width:auto; } .tmp_note_row td { border:none; }</description>
    </item>
    
    <item>
      <title>Function</title>
      <link>https://marcoepsilon.github.io/posts/c&#43;&#43;/languages/function/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://marcoepsilon.github.io/posts/c&#43;&#43;/languages/function/</guid>
      <description>Overview C++的函数声明介绍了函数的名称和函数的类型,而函数的定义是将函数的声明和函数体关联起来。 Function Declaration 函数声明能够出现在任何.tmp_link a:hover {</description>
    </item>
    
    <item>
      <title>&amp;lt;&amp;lt;The Art of R Programing&amp;gt;&amp;gt; -- exercise</title>
      <link>https://marcoepsilon.github.io/posts/r/art-of-r-programing/</link>
      <pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://marcoepsilon.github.io/posts/r/art-of-r-programing/</guid>
      <description>&amp;nbsp;Exercise #1 &amp;nbsp;Target: 图像操作 用户可以使用选取pgm图片对角线的位置,为其打上马赛克(为图片的灰度值增加噪声) &amp;nbsp;Details 运用pixmap读取pgm格式图片,使用pl</description>
    </item>
    
    <item>
      <title>Serde</title>
      <link>https://marcoepsilon.github.io/rustlib/serde/</link>
      <pubDate>Wed, 08 Jan 2020 13:49:32 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/rustlib/serde/</guid>
      <description>Overview serde是为rust数据结构高效的序列化和反序列化的框架,其他的大部分语言使用运行时的反射技术来序列化数据,Serde是建立在Rust高</description>
    </item>
    
    <item>
      <title>Go Exercise Url-Shortener</title>
      <link>https://marcoepsilon.github.io/posts/exercise/go/url-shortener/</link>
      <pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://marcoepsilon.github.io/posts/exercise/go/url-shortener/</guid>
      <description>Exercise Requirement Go语言的语法及基本概念 包net/http的一些基本函数其含义和功能 一些JSON,YAML,TOML等格式数据的序列化和反序列化 命令行的</description>
    </item>
    
    <item>
      <title>Http</title>
      <link>https://marcoepsilon.github.io/golib/net/http/</link>
      <pubDate>Sat, 07 Dec 2019 14:25:29 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/golib/net/http/</guid>
      <description>Overview 包http提供了HTTP客户和服务端的实现. Get,Head,Post,PostForm用于HTTP(或者HTTPS)请求: resp, err := http.Get(&amp;quot;http://example.com/&amp;quot;) ... resp, err</description>
    </item>
    
    <item>
      <title>Life</title>
      <link>https://marcoepsilon.github.io/life/life/</link>
      <pubDate>Fri, 06 Dec 2019 12:34:48 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/life/life/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Syslog</title>
      <link>https://marcoepsilon.github.io/golib/log/syslog/</link>
      <pubDate>Sun, 24 Nov 2019 22:45:02 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/golib/log/syslog/</guid>
      <description>Overview 包syslog提供系统日志服务,它能够发送消息到系统日志守护进程使用Unix套接字UDP或者TCP. 只需要调用一次Dial,当写入失败时,</description>
    </item>
    
    <item>
      <title>Log</title>
      <link>https://marcoepsilon.github.io/golib/log/log/</link>
      <pubDate>Thu, 21 Nov 2019 22:25:04 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/golib/log/log/</guid>
      <description>Overview 包log实现简单的日志包,它定义的类型Logger,包含一些格式化输出的方法,它还有预定义的易访问的标准&#34;Logger&#34;,通过帮助函数 Pr</description>
    </item>
    
    <item>
      <title>Sort</title>
      <link>https://marcoepsilon.github.io/golib/sort/</link>
      <pubDate>Wed, 20 Nov 2019 16:25:24 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/golib/sort/</guid>
      <description>Overview 包sort提供排序切片和用户自定义集合的原语 函数(Functions) func Float64s(a []float64) Float64s以升序排序切片,NaN(not a number)</description>
    </item>
    
    <item>
      <title>Unsafe</title>
      <link>https://marcoepsilon.github.io/golib/unsafe/</link>
      <pubDate>Sat, 09 Nov 2019 23:03:46 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/golib/unsafe/</guid>
      <description>Overview unsafe包含了绕过go类型安全的方法,导入unsafe包可能是不可移植的. type ArbitraryType type ArbitraryType int ArbitraryType在包中的目的仅仅是为了文</description>
    </item>
    
    <item>
      <title>Atomic</title>
      <link>https://marcoepsilon.github.io/golib/sync/atomic/</link>
      <pubDate>Wed, 06 Nov 2019 22:08:28 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/golib/sync/atomic/</guid>
      <description>Overview 包atomic提供了底层原子atomic memory原语,用于实现同步算法. 这些函数要求格外的小心才能正确使用.除了特别的底层应用,同步最</description>
    </item>
    
    <item>
      <title>Sync</title>
      <link>https://marcoepsilon.github.io/golib/sync/sync/</link>
      <pubDate>Sat, 02 Nov 2019 22:29:07 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/golib/sync/sync/</guid>
      <description>Overview sync提供了同步原语比如互斥锁,以及Once,WaitGroup类型.大多都供底层例层使用,高级同步更好地的使用通过通道和交流,该包包含</description>
    </item>
    
    <item>
      <title>Time</title>
      <link>https://marcoepsilon.github.io/golib/time/</link>
      <pubDate>Mon, 14 Oct 2019 23:13:49 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/golib/time/</guid>
      <description>Overview time包提供了展示和测量时间的功能 日历始终采用公历没有闰秒 单调时间(Monotonic Clocks) 单调时间意指绝对时间,手动修改修改时间不会对其影</description>
    </item>
    
    <item>
      <title>Flag</title>
      <link>https://marcoepsilon.github.io/golib/flag/</link>
      <pubDate>Sat, 12 Oct 2019 00:14:17 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/golib/flag/</guid>
      <description>Overview flag包实现了命令行的解析 使用说明(Usage) 定义flags使用flag.Bool(),String(),Int()等 这个声明一个整型</description>
    </item>
    
    <item>
      <title>Errors</title>
      <link>https://marcoepsilon.github.io/golib/errors/</link>
      <pubDate>Fri, 11 Oct 2019 22:54:01 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/golib/errors/</guid>
      <description>Overview errors包实现了处理错误函数的实现 New函数用于创建带文本消息上下文的错误 Unwrap,Is,As函数工作于封装了其他错误的error</description>
    </item>
    
    <item>
      <title>Ruby Concurrent Programing</title>
      <link>https://marcoepsilon.github.io/posts/ruby/ruby_thread/</link>
      <pubDate>Wed, 25 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://marcoepsilon.github.io/posts/ruby/ruby_thread/</guid>
      <description>Thread Threads用于实现Ruby并发编程模型,使用Thread Class是开发者的完美候选 比如,我们可以创建一个与主线程分离的新线程,通过:</description>
    </item>
    
    <item>
      <title>Net</title>
      <link>https://marcoepsilon.github.io/golib/net/net/</link>
      <pubDate>Mon, 23 Sep 2019 17:16:17 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/golib/net/net/</guid>
      <description>Overview net包提供了可移植的网络I/O接口,包括TCP/IP,UDP,域名解析,Unix域socket,尽管包提供了接近底层网络原语的方法,但是</description>
    </item>
    
    <item>
      <title>Strings</title>
      <link>https://marcoepsilon.github.io/golib/strings/</link>
      <pubDate>Fri, 20 Sep 2019 22:50:47 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/golib/strings/</guid>
      <description>Overview strings包提供了简单的函数操作UTF-8编码的字符串 Functions func Compare(a, b string) int 以字典序比较两个字符串并返回结果,如果结果大于0,说明a大于b,结果</description>
    </item>
    
    <item>
      <title>Binary</title>
      <link>https://marcoepsilon.github.io/golib/encoding/binary/</link>
      <pubDate>Thu, 19 Sep 2019 18:28:05 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/golib/encoding/binary/</guid>
      <description>Overview 包binary实现了简单数字和字节序列的转换,以及各种编码和解码 数字由读取和写入固定大小的值转化,固定大小值是算术类型(bool,int8</description>
    </item>
    
    <item>
      <title>Bufio</title>
      <link>https://marcoepsilon.github.io/golib/bufio/</link>
      <pubDate>Mon, 16 Sep 2019 22:48:20 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/golib/bufio/</guid>
      <description>bufio Overview bufio实现了带缓冲的io操作,提供了对io.Reader,io.Write封装对象Reader,Writer,不仅实现了这些接口,而</description>
    </item>
    
    <item>
      <title>File &amp;&amp; Directory</title>
      <link>https://marcoepsilon.github.io/posts/system/file/</link>
      <pubDate>Sat, 14 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://marcoepsilon.github.io/posts/system/file/</guid>
      <description>Overview 目录(Directory)主要用于将磁盘中的文件分级表示,而文件则用于在磁盘中存储数据,且目录与文件的组合,使得数据有组织,而不产生混乱 File</description>
    </item>
    
    <item>
      <title>Os</title>
      <link>https://marcoepsilon.github.io/golib/os/</link>
      <pubDate>Wed, 11 Sep 2019 23:27:39 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/golib/os/</guid>
      <description>Os Os库提供了平台无关的通用接口实现操作系统底层操作,功能设计风格是Unix-Like的,但是错误处理不像Unix提供简单的数字,而是Go-</description>
    </item>
    
    <item>
      <title>Ruby Basic Summary</title>
      <link>https://marcoepsilon.github.io/posts/ruby/basic_summary/</link>
      <pubDate>Thu, 05 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://marcoepsilon.github.io/posts/ruby/basic_summary/</guid>
      <description>Ruby Ruby是一门通用面向对象脚本语言,此外ruby还对函数式编程提供很好的支持,元编程也是这门语言的强大之处,编写DSL(Domain Specific Language) 也</description>
    </item>
    
    <item>
      <title>Photos</title>
      <link>https://marcoepsilon.github.io/photos/photos/</link>
      <pubDate>Wed, 21 Aug 2019 22:24:59 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/photos/photos/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Regexp</title>
      <link>https://marcoepsilon.github.io/golib/regexp/</link>
      <pubDate>Mon, 19 Aug 2019 22:27:55 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/golib/regexp/</guid>
      <description>正则表达式语法概述(熟悉可跳过) 对于go 正则表达式语法也可以运行下列命令查看 go doc regexp/syntax 单字符集 符号 描述 . 匹配任意字符,可能包含&#39;\n&#39;(当 flag s =</description>
    </item>
    
    <item>
      <title>Stack &amp;&amp; Queue</title>
      <link>https://marcoepsilon.github.io/posts/algorithm/stack_queue/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://marcoepsilon.github.io/posts/algorithm/stack_queue/</guid>
      <description>注:以下解释代码均是由go语言编写 完整示例代码 开始之前 栈(Stack)和队列(Queue)的逻辑结构都是线性表,而且其存储结构均可用顺序表和</description>
    </item>
    
    <item>
      <title>Future</title>
      <link>https://marcoepsilon.github.io/rustlib/future/</link>
      <pubDate>Mon, 22 Jul 2019 22:41:12 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/rustlib/future/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tokio</title>
      <link>https://marcoepsilon.github.io/rustlib/tokio/</link>
      <pubDate>Mon, 22 Jul 2019 21:02:22 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/rustlib/tokio/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Io</title>
      <link>https://marcoepsilon.github.io/golib/io/</link>
      <pubDate>Mon, 22 Jul 2019 18:09:46 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/golib/io/</guid>
      <description>Io库概述 IO库提供了一些IO操作的原语,主要任务是封装一些存在的实现,比如os库里的,为共享的功能提供抽象的接口,附加一些辅助操作,因为这</description>
    </item>
    
    <item>
      <title>Linear List</title>
      <link>https://marcoepsilon.github.io/posts/algorithm/linear-list/</link>
      <pubDate>Sun, 21 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://marcoepsilon.github.io/posts/algorithm/linear-list/</guid>
      <description>注意:下面算法描述是采用go语言编写 完整示例代码 线性表 线性表是一种具有 \(n\) 个相同元素 \((n = 0)\) 的有限序列 $$L = \{a_{1},\ a_{2},\ a_{3}, \ ...,\ a_{n}\}$$ 它们须满足: 存在逻辑上的第</description>
    </item>
    
    <item>
      <title>Linear-Algebra</title>
      <link>https://marcoepsilon.github.io/posts/math/linear-algebra/</link>
      <pubDate>Thu, 18 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://marcoepsilon.github.io/posts/math/linear-algebra/</guid>
      <description>逆序数 考虑一个长度为n的偏序序列 \(a_{1}a_{2}a_{3}{\cdots}a_{n}\) 首先我们需要对这个序列规定标准次序,比如规定序列升序是升序排列的,而若序列中前面与后面的元素违反了标准次序</description>
    </item>
    
    <item>
      <title>English Writing</title>
      <link>https://marcoepsilon.github.io/posts/english/writing/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://marcoepsilon.github.io/posts/english/writing/</guid>
      <description>2017 英语(一) Directions: You are to write a email to James Cook, a newly arrived Austrlian professor,recommending some tourist attractions in your city. Please give reasons for your recommendation. Self Analysis: 1. 第一段表达出对James Cook教授的到来感到高兴 2. 第二段开始介绍自</description>
    </item>
    
    <item>
      <title>Record The Tools I&#39;ve Used</title>
      <link>https://marcoepsilon.github.io/tools/</link>
      <pubDate>Sat, 13 Jul 2019 20:33:31 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/tools/</guid>
      <description>Tools Website: Shields.io 用于生成类似于 这样的badges Hugo Website: Hugo 用于生成静态网站,本站的形成得益于它 画图工具:Graphviz 用于画有向图,无向图的有力工具,支</description>
    </item>
    
    <item>
      <title>Go Reflection</title>
      <link>https://marcoepsilon.github.io/posts/20190713/</link>
      <pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://marcoepsilon.github.io/posts/20190713/</guid>
      <description>何为Reflection Reflection是一种能够窥探类型和值信息的技术,利用该技术我们能在运行时了解,修改类型和值内部结构的信息 interface{} in</description>
    </item>
    
    <item>
      <title>Golang Template</title>
      <link>https://marcoepsilon.github.io/posts/20190706/</link>
      <pubDate>Sat, 06 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://marcoepsilon.github.io/posts/20190706/</guid>
      <description>Get Started 初识模板 模板是go编程里一项重要的技术,模板是进行生成代码(类似于其他语言的宏编程),web页面后端渲染,文件批量生成与替换等应用的高效</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://marcoepsilon.github.io/about/</link>
      <pubDate>Fri, 28 Jun 2019 13:05:23 +0800</pubDate>
      
      <guid>https://marcoepsilon.github.io/about/</guid>
      <description>关于 我叫Marco Epsilon,一名编程界的小学生.ps:上面是我老婆!!!! 我爱过,然后我沉默,人海里漂流。 @五月天</description>
    </item>
    
    <item>
      <title>Web前端开发环境的构建</title>
      <link>https://marcoepsilon.github.io/posts/20190626/</link>
      <pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://marcoepsilon.github.io/posts/20190626/</guid>
      <description>开始之前 先准备一下nodejs,npm(用于安装一些js包,npm一般是nodejs自带的包管理工具),通过官网下载即可 构建工具 先选择一个本</description>
    </item>
    
  </channel>
</rss>